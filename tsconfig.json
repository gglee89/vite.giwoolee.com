{
    // These options make up the bulk of TypeScriptâ€™s
    // configuration and it covers how the language should work.
    "compilerOptions": {
        // Modern browsers support all ES6 features, so ES6 is a good choice.
        "target": "ESNext",
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": false,
        "skipLibCheck": true,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        // A best practice is to use the forceConsistentCasingInFileNames option in your tsconfig.json file.
        // TypeScript will issue an error if you try to include a file by using a different casing from the casing of the file name on the disk.
        "forceConsistentCasingInFileNames": true,
        "noFallthroughCasesInSwitch": true,
        "module": "ESNext",
        // You can read more about classic vs node module resolution in the TypeScript docs (https://www.typescriptlang.org/docs/handbook/module-resolution.html#module-resolution-strategies).
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "react-jsx",
        "types": ["vite/client", "vite-plugin-svgr/client"],
        "baseUrl": "src",
        "sourceMap": true,
        "paths": {
            "assets": ["src/assets/*"],
            "modules": ["src/modules/*"],
            "shared": ["src/shared/*"],
            "components": ["src/components/*"],
            "reducers": ["src/reducers/*"],
            "pages": ["src/pages/*"],
            "actions": ["src/actions/*"],
            "services": ["src/services/*"],
            "data": ["src/data/*"]
        }
    },
    "include": ["src"],
    "exclude": ["node_modules/", "build", "src/**/*.spec.ts"]
}
